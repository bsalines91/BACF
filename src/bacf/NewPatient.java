/**
 * BACF - Battery of Assessment of Cognitive Functioning
 * 
 * This program represents a test for gauging the cognitive reasoning
 * of an individual whom has suffered a traumatic brain injury. There are
 * five separate tests: 25 Numbers, Association, Exclusion, Generalization,
 * and Recall. Each use a timer an point system in order to calculate results,
 * show them to the examiner, and store the information in a database for
 * future management.
 * 
 * Written for Michael Meyerson
 */
package bacf;

/**
 * This class represents the New Patient page, where the user
 * can enter information to create a patient.
 *
 * @author Brandon Salines
 * @author Anthony Eannarino
 * @author Brian Faria
 */
public class NewPatient extends ExaminerPage {
    public static final int ID = 2;

    /**
     * Creates the page.
     * @param c A reference to the Controller object.
     */
    public NewPatient(Controller c) {
        super(c);
        initComponents();
        radioButtonMale.setBackground(DEFAULT);
        radioButtonFemale.setBackground(DEFAULT);
        labelError.setText("");
        panelNewPatient.setBackground(DEFAULT);
        this.setNextPage(ID); // Disables page transition until all info is filled in.
        this.setPreviousPage(NeworPrevPatient.ID);
        this.setTest(panelNewPatient);
        this.setEnabledStart(false);
    }
    
    /**
     * Overrides the method in ExaminerPage. Resets the text fields
     * to there default/blank values.
     */
    @Override
    public void prepPage() {
        firstNameField.setText("");
        lastNameField.setText("");
        birthDateField.setText("YYYY-MM-DD");
        radioButtonMale.setSelected(false);
        radioButtonFemale.setSelected(false);
        educationField.setSelectedIndex(0);
        occupationField.setText("");
        ageField.setText("");
        currDateField.setText("YYYY-MM-DD");
        locationField.setText("");
        examinerField.setText("");
        labelError.setText("");
        this.setNextPage(NewPatient.ID);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNewPatient = new javax.swing.JPanel();
        labelFName = new javax.swing.JLabel();
        labelLName = new javax.swing.JLabel();
        labelDOB = new javax.swing.JLabel();
        labelGender = new javax.swing.JLabel();
        labelEducation = new javax.swing.JLabel();
        labelOccupation = new javax.swing.JLabel();
        labelAge = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        birthDateField = new javax.swing.JFormattedTextField();
        educationField = new javax.swing.JComboBox<>();
        occupationField = new javax.swing.JTextField();
        ageField = new javax.swing.JTextField();
        labelTitle = new javax.swing.JLabel();
        labelDate = new javax.swing.JLabel();
        labelLocation = new javax.swing.JLabel();
        labelExaminer = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        locationField = new javax.swing.JTextArea();
        currDateField = new javax.swing.JFormattedTextField();
        examinerField = new javax.swing.JTextField();
        radioButtonMale = new javax.swing.JRadioButton();
        radioButtonFemale = new javax.swing.JRadioButton();
        labelError = new javax.swing.JLabel();

        setAutoscrolls(true);

        panelNewPatient.setAutoscrolls(true);

        labelFName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelFName.setText("First Name: ");

        labelLName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelLName.setText("Last Name: ");

        labelDOB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelDOB.setText("DOB: ");

        labelGender.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelGender.setText("Gender:");

        labelEducation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelEducation.setText("Education: ");

        labelOccupation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelOccupation.setText("Occupation");

        labelAge.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelAge.setText("Age: ");

        firstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameFieldActionPerformed(evt);
            }
        });

        birthDateField.setText("YYYY-MM-DD");

        educationField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        educationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                educationFieldActionPerformed(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelTitle.setText("New Patient");

        labelDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelDate.setText("Date:");

        labelLocation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelLocation.setText("Location:");

        labelExaminer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelExaminer.setText("Examiner:");

        locationField.setColumns(20);
        locationField.setRows(5);
        jScrollPane1.setViewportView(locationField);

        currDateField.setText("YYYY-MM-DD");

        examinerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examinerFieldActionPerformed(evt);
            }
        });

        radioButtonMale.setText("Male");
        radioButtonMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonMaleActionPerformed(evt);
            }
        });

        radioButtonFemale.setText("Female");
        radioButtonFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonFemaleActionPerformed(evt);
            }
        });

        labelError.setText("ErrorLabel");

        javax.swing.GroupLayout panelNewPatientLayout = new javax.swing.GroupLayout(panelNewPatient);
        panelNewPatient.setLayout(panelNewPatientLayout);
        panelNewPatientLayout.setHorizontalGroup(
            panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewPatientLayout.createSequentialGroup()
                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(labelTitle))
                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelNewPatientLayout.createSequentialGroup()
                                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelFName)
                                    .addComponent(labelGender)
                                    .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(labelEducation)
                                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelAge)
                                            .addComponent(labelOccupation))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                                        .addComponent(radioButtonMale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(radioButtonFemale))
                                    .addComponent(educationField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(occupationField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(birthDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelNewPatientLayout.createSequentialGroup()
                                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelDOB)
                                    .addComponent(labelLName))
                                .addGap(195, 195, 195)
                                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                                        .addComponent(labelExaminer)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(examinerField, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelLocation)
                                            .addComponent(labelDate))
                                        .addGap(18, 18, 18)
                                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(currDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(labelError)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        panelNewPatientLayout.setVerticalGroup(
            panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNewPatientLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFName)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDate)
                    .addComponent(currDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelLName)
                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelLocation))
                        .addGap(25, 25, 25)
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelDOB)
                            .addComponent(birthDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelExaminer)
                            .addComponent(examinerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(188, 188, 188))
                    .addGroup(panelNewPatientLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelGender)
                            .addComponent(radioButtonMale)
                            .addComponent(radioButtonFemale))
                        .addGap(18, 18, 18)
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelEducation)
                            .addComponent(educationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelOccupation)
                            .addComponent(occupationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelNewPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAge)
                            .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(labelError)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelNewPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelNewPatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * AUTO-GENERATED -> Unused and unable to delete.
     * @param evt 
     */
    private void firstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameFieldActionPerformed
    }//GEN-LAST:event_firstNameFieldActionPerformed

    /**
     * AUTO-GENERATED -> Unused and unable to delete.
     * @param evt 
     */
    private void educationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_educationFieldActionPerformed
    }//GEN-LAST:event_educationFieldActionPerformed

    /**
     * AUTO-GENERATED -> Unused and unable to delete.
     * @param evt 
     */
    private void examinerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examinerFieldActionPerformed
    }//GEN-LAST:event_examinerFieldActionPerformed

    /**
     * Ensures that when a radio button is selected, only one may be selected
     * at any time.
     * @param evt 
     */
    private void radioButtonFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonFemaleActionPerformed
        // Female
        if (radioButtonFemale.isSelected()) {
            radioButtonMale.setSelected(false);
        }
    }//GEN-LAST:event_radioButtonFemaleActionPerformed

    /**
     * Ensures that when a radio button is selected, onle one may be selected
     * at any time.
     * @param evt 
     */
    private void radioButtonMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonMaleActionPerformed
        // Male
        if (radioButtonMale.isSelected()) {
            radioButtonFemale.setSelected(false);
        }
    }//GEN-LAST:event_radioButtonMaleActionPerformed

    /**
     * Calls when Next button is clicked. Checked text fields for valid data,
     * creates a patient entity in the database, and proceeds to the Numbers Test.
     */
    @Override
    public void performUpdate() {
        // Perform Database queries here...
        String gender = (radioButtonMale.isSelected()) ? "Male" : "Female";
        if (checkFields() && this.getController().getPatID() == -1) {
            int patID = this.getController().getDatabase().addPatient(firstNameField.getText(),
                    lastNameField.getText(), birthDateField.getText(),
                    gender, educationField.getSelectedItem().toString(),
                    occupationField.getText(), Integer.parseInt(ageField.getText()),
                    currDateField.getText(), locationField.getText(),
                    examinerField.getText());
            this.getController().setPatID(patID);
            this.setNextPage(NumbersTest1.ID);
        }
    }
    
    /**
     * Checks the input in the text fields and displays appropriate error messages.
     * @return True if all data is valid, false otherwise.
     */
    private boolean checkFields() {
        boolean isValid = true;
        if (firstNameField.getText().equals("") || (!firstNameField.getText().matches("[A-Za-z]+"))) {
            labelError.setText("First name field is empty or contains invaild charactors");
            isValid = false;
        } else if (lastNameField.getText().equals("") || (!lastNameField.getText().matches("[A-Za-z]+"))) {
            labelError.setText("Last name field is empty or contains invaild charactors");
            isValid = false;
        } else if (!(birthDateField.getText().matches("([0-9]{4})-([0-9]{2})-([0-9]{2})"))) {
            labelError.setText("Birth Date field is empty or contains invaild charactors");
            isValid = false;
        } else if (!(radioButtonMale.isSelected() || radioButtonFemale.isSelected())) {
            labelError.setText("Gender is not selected");
            isValid = false;
        } else if (educationField.getSelectedItem().equals("None Selected")) {
            labelError.setText("Education field is not selected");
            isValid = false;
        } else if (occupationField.getText().equals("") || (!occupationField.getText().matches("[A-Za-z\\s]+"))) {
            labelError.setText("Occupation field is empty or contains invaild charactors");
            isValid = false;
        } else if (!(ageField.getText().matches("[0-9]+"))) {
            labelError.setText("Age field is empty or contains invaild charactors");
            isValid = false;
        } else if (!(currDateField.getText().matches("([0-9]{4})-([0-9]{2})-([0-9]{2})"))) {
            labelError.setText("Current date field is empty or contains invaild charactors");
            isValid = false;
        } else if (locationField.getText().equals("") || locationField.getText().contains("'")) {
            labelError.setText("Location field is empty or contains invalid characters");
            isValid = false;
        } else if (examinerField.getText().equals("") || (!examinerField.getText().matches("[A-Za-z\\s]+"))) {
            labelError.setText("Examiner field is empty or contains invaild charactors");
            isValid = false;
        }

        return isValid;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageField;
    private javax.swing.JFormattedTextField birthDateField;
    private javax.swing.JFormattedTextField currDateField;
    private javax.swing.JComboBox<String> educationField;
    private javax.swing.JTextField examinerField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAge;
    private javax.swing.JLabel labelDOB;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelEducation;
    private javax.swing.JLabel labelError;
    private javax.swing.JLabel labelExaminer;
    private javax.swing.JLabel labelFName;
    private javax.swing.JLabel labelGender;
    private javax.swing.JLabel labelLName;
    private javax.swing.JLabel labelLocation;
    private javax.swing.JLabel labelOccupation;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextArea locationField;
    private javax.swing.JTextField occupationField;
    private javax.swing.JPanel panelNewPatient;
    private javax.swing.JRadioButton radioButtonFemale;
    private javax.swing.JRadioButton radioButtonMale;
    // End of variables declaration//GEN-END:variables
}
