/**
 * BACF - Battery of Assessment of Cognitive Functioning
 * 
 * This program represents a test for gauging the cognitive reasoning
 * of an individual whom has suffered a traumatic brain injury. There are
 * five separate tests: 25 Numbers, Association, Exclusion, Generalization,
 * and Recall. Each use a timer an point system in order to calculate results,
 * show them to the examiner, and store the information in a database for
 * future management.
 * 
 * Written for Michael Meyerson
 */
package bacf;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * This class represents the additional button panel for navigating
 * between pages.
 *
 * @author Brandon Salines
 * @author Anthony Eannarino
 * @author Brian Faria
 */
public class ButtonPanel extends JPanel {

    private final Controller controller;
    private final ExaminerPage examiner;
    
    /**
     * Creates new form ButtonPanel
     * @param c A reference to the controller object
     * @param e A reference to the examiner object
     */
    public ButtonPanel(Controller c, ExaminerPage e) {
        this.controller = c; // Reference to controller object
        this.examiner = e; // Reference to containing object
        initComponents();
    }
    
    /**
     * Enables/Disables the Start button.
     * @param status A boolean value representing the visibility of the Start
     * button.
     */
    public void setEnabledStart(boolean status) {
        buttonStart.setVisible(status);
    }
    
    /**
     * Shows the page with the given ID. Displays a confirmation window
     * if returning to the main page.
     * @param pageID 
     */
    private void loadPage(int pageID) {
        if (pageID == NeworPrevPatient.ID) {
            String message = "Are you sure you want to leave the test?";
            int buttonOption = JOptionPane.YES_NO_OPTION;
            int confirmClose = JOptionPane.showConfirmDialog(
                    this.controller, message, "Restart", buttonOption);
            if (confirmClose == JOptionPane.YES_OPTION) {
                this.controller.showPage(pageID);
            }
        }
        else {
            this.controller.showPage(pageID);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonStart = new javax.swing.JButton();
        buttonPrevious = new javax.swing.JButton();
        buttonNext = new javax.swing.JButton();

        buttonStart.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        buttonStart.setText("Start");
        buttonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartActionPerformed(evt);
            }
        });

        buttonPrevious.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        buttonPrevious.setText("Previous");
        buttonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviousActionPerformed(evt);
            }
        });

        buttonNext.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        buttonNext.setText("Next");
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonPrevious, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(buttonNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonPrevious, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Starts the timer and initializes any other page components.
     * @param evt 
     */
    private void buttonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartActionPerformed
        this.examiner.startTest();
    }//GEN-LAST:event_buttonStartActionPerformed

    /**
     * Stops the timer and shows the previous page.
     * @param evt 
     */
    private void buttonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviousActionPerformed
        this.examiner.stopTimer();
        this.loadPage(this.examiner.getPreviousPage());
    }//GEN-LAST:event_buttonPreviousActionPerformed

    /**
     * Stops the timer, updates the database, and shows the next page.
     * @param evt 
     */
    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        this.examiner.stopTimer();
        this.examiner.performUpdate();
        this.loadPage(this.examiner.getNextPage());
    }//GEN-LAST:event_buttonNextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonPrevious;
    private javax.swing.JButton buttonStart;
    // End of variables declaration//GEN-END:variables
}
